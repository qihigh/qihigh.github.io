<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Androids on 齐欢的博客</title>
    <link>http://qihigh.github.io/android/</link>
    <description>Recent content in Androids on 齐欢的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 05 Nov 2015 11:35:34 +0800</lastBuildDate>
    <atom:link href="http://qihigh.github.io/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sina新接口问题</title>
      <link>http://qihigh.github.io/android/sina_new_api/</link>
      <pubDate>Thu, 05 Nov 2015 11:35:34 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/sina_new_api/</guid>
      <description>

&lt;h3 id=&#34;有问题的接口:39b0bd26443eb9e506e3b7b5698b2b2b&#34;&gt;有问题的接口&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;2/statuses/timeline_batch.json  没找到，我们在频道页需要使用，抓指定用户的微博timeline&lt;/li&gt;
&lt;li&gt;2/statuses/show_batch.json      没找到，我们在热门微博和热门话题里需要使用&lt;/li&gt;
&lt;li&gt;上传图片需要调整上传机制&lt;/li&gt;
&lt;li&gt;调整私信附件上传机制&lt;/li&gt;
&lt;li&gt;私信无法发送&lt;/li&gt;
&lt;li&gt;陌生人私信接口不一样，走的IM长连接&lt;/li&gt;
&lt;li&gt;2/friendships/friends/in_common.json   共同关注接口，没找到&lt;/li&gt;
&lt;li&gt;2/friendships/friends/bilateral.json   相互关注接口，没找到&lt;/li&gt;
&lt;li&gt;赞接口改为set_like, cancel_like, 参数未知&lt;/li&gt;
&lt;li&gt;无法更改用户头像&lt;/li&gt;
&lt;li&gt;2/account/profile/basic_update.json 无法更新用户信息&lt;/li&gt;
&lt;li&gt;2/place/pois/search.json接口不存在了，用2/place/nearby/pois，参数加q，传入keyword即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;处理中的接口:39b0bd26443eb9e506e3b7b5698b2b2b&#34;&gt;处理中的接口&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; SearchApi &lt;/input&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; UserApi &lt;/input&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; MyAccountApi &lt;/input&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; SuggestingApi  &lt;/input&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; BatchTimeLineApi  &lt;/input&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里暂时使用的Gsid+srouceAppkey方式代替accessToken。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;checked&#34; disabled=&#34;true&#34;&gt; CommentApi &lt;/input&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;input type=&#34;checkbox&#34; disabled=&#34;false&#34;&gt; 发布评论、转发、微博 &lt;/input&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;特殊的，上传图片接口，发送多图的接口不对，暂时用gsid方式代替accessToken&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;waiting&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>本地图片加载方案(强化picasso)</title>
      <link>http://qihigh.github.io/android/myLocalImageLoader/</link>
      <pubDate>Tue, 27 Oct 2015 18:01:38 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/myLocalImageLoader/</guid>
      <description>&lt;p&gt;由于最新的picasso加载本地图片时，如果图片是相机直接拍摄的，一般尺寸会非常大，picasso处理不了这样的大图。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glide应该可以处理,没有尝试.&lt;/li&gt;
&lt;li&gt;Ion应该是可以的.&lt;/li&gt;
&lt;li&gt;Facebook 的 Fresco 是可以的.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里不想因为这个问题就换掉整个picasso，然后就打算自己写一个。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.squareup.picasso;

import android.graphics.Bitmap;
import android.media.ThumbnailUtils;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.util.LruCache;
import android.text.TextUtils;
import android.widget.ImageView;

import com.eico.weico.WApplication;
import com.eico.weico.utility.BitmapUtil;

import java.util.concurrent.ExecutorService;

/**
 * Created by qihuan on 15/10/27.
 */
public class MyLoadFileLoader {
    private static MyLoadFileLoader instance;
    //线程池
    private final ExecutorService threadPool;
    //内存缓存
    private final LruCache&amp;lt;String, Bitmap&amp;gt; cache;

    static {
        instance = new MyLoadFileLoader();
    }


    private MyLoadFileLoader() {
        threadPool = WApplication.cThreadPool;
        cache = new LruCache(50);
    }

    public static MyLoadFileLoader getInstance() {
        return instance;
    }

    /**
     * 触发加载
     * 1. 缓存中有，直接从缓存中获取
     * 2. 缓存中没有，读取图片，并采用ThumbUtil进行方图裁切。
     *
     * @param aPath     本地图片路径
     * @param aSize     最终显示的大小（仅支持方图）
     * @param aResId    placeholder
     * @param imageView 目标imageView
     */
    public void load(final String aPath, final int aSize, int aResId, final ImageView imageView) {
        if (TextUtils.isEmpty(aPath)) {
            //失败默认使用resId
            if (aResId &amp;gt; 0) {
                imageView.setImageResource(aResId);
            }
            return;
        }
        //防止图片串位
        imageView.setTag(aPath);
        //缓存处理
        Bitmap cachedBitmap = cache.get(aPath);
        if (null != cachedBitmap) {
            imageView.setImageBitmap(cachedBitmap);
            return;
        }

        //placeholder
        if (aResId &amp;gt; 0) {
            imageView.setImageResource(aResId);
        }

        final Bitmap[] bitmaps = new Bitmap[1];

        //回归UI线程处理
        final Handler handler = new Handler(Looper.getMainLooper(), new Handler.Callback() {
            @Override
            public boolean handleMessage(Message msg) {
                if (aPath.equals(imageView.getTag()) &amp;amp;&amp;amp; null != bitmaps[0]) {
                    imageView.setImageBitmap(bitmaps[0]);
                }
                return false;
            }
        });

        //本地读取裁切任务，添加到线程池
        threadPool.submit(new Runnable() {
            @Override
            public void run() {
                Bitmap source = BitmapUtil.decodeBitmap(aPath, 200);
                Bitmap temp = ThumbnailUtils.extractThumbnail(source, aSize, aSize);
                if (null != temp &amp;amp;&amp;amp; temp.getWidth() &amp;gt; 0) {
                    //图片添加到缓存，通知UI线程更新
                    bitmaps[0] = temp;
                    handler.sendEmptyMessage(0);
                    cache.put(aPath, temp);
                }
            }
        });

    }

}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>picasso滑动暂停加载</title>
      <link>http://qihigh.github.io/android/picasso/</link>
      <pubDate>Tue, 27 Oct 2015 11:20:35 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/picasso/</guid>
      <description>&lt;p&gt;需要在滑动的listView中进行监听，这里有两个listener，一个是针对listView的，一个是针对RecyclerView的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.squareup.picasso;

import android.content.Context;
import android.widget.AbsListView;

public class SampleScrollListener implements AbsListView.OnScrollListener {
    private final Context context;
    private static final Object scrollTag = new Object(); // this can be static or not, depending what u want to achieve

    public SampleScrollListener(Context context) {
        this.context = context;
    }

    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        final Picasso picasso = Picasso.with(context);
        if (scrollState == SCROLL_STATE_IDLE || scrollState == SCROLL_STATE_TOUCH_SCROLL) {
            picasso.resumeTag(scrollTag);
        } else {
            picasso.pauseTag(scrollTag);
        }
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
                         int totalItemCount) {
        // Do nothing.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;package com.ewintory.udacity.popularmovies.utils;


import android.content.Context;
import android.support.v7.widget.RecyclerView;


import com.squareup.picasso.Picasso;
import com.squareup.picasso.RequestCreator;


/**
 * Simple {@link RecyclerView.OnScrollListener} implementation which
 * pauses/resumes Picasso&#39;s tagged requests
 *
 * @author Emin Yahyayev
 * @see {@link RequestCreator#tag(Object)}
 */
public final class PicassoScrollListener extends RecyclerView.OnScrollListener {


    private static final int DEFAULT_SENSITIVITY = 120;


    private Picasso mPicasso;
    private int mPauseSensitivity; // scroll sensitivity
    private Object mTag;


    public PicassoScrollListener(Context context, Object tag) {
        this(Picasso.with(context), tag, DEFAULT_SENSITIVITY);
    }


    public PicassoScrollListener(Picasso picasso, Object tag) {
        this(picasso, tag, DEFAULT_SENSITIVITY);
    }


    public PicassoScrollListener(Context context, Object tag, int pauseSensitivity) {
        this(Picasso.with(context), tag, pauseSensitivity);
    }


    public PicassoScrollListener(Picasso picasso, Object tag, int pauseSensitivity) {
        mPicasso = picasso;
        mPauseSensitivity = pauseSensitivity;
        mTag = tag;
    }


    @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
        if (Math.abs(dy) &amp;gt; mPauseSensitivity)
            mPicasso.pauseTag(mTag);
        else
            mPicasso.resumeTag(mTag);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>adb识别新的usb连接</title>
      <link>http://qihigh.github.io/android/usb_adb/</link>
      <pubDate>Mon, 26 Oct 2015 15:39:24 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/usb_adb/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;当有一个新的Android设备想要连接电脑时，如果识别不了，则需要主动将该设备的设备码id添加到abd_usb.ini的配置文件中。接下来介绍的是如何查找新设备的设备码。
&lt;pre&gt;
//mac下对应的命令
system_profiler SPUSBDataType &amp;gt; ~/usb.txt  &lt;/pre&gt;
打开文件usb.txt，在最后的&lt;code&gt;USB Hi-Speed Bus: -&amp;gt; Hub -&amp;gt; Android&lt;/code&gt;可以找到这个Android的条目，其中的&lt;code&gt;Vendor ID: 0x2a70&lt;/code&gt;就是对应的id，追加到&lt;code&gt;echo 0x2a70 &amp;gt;&amp;gt; ~/.android/adb_usb.ini&lt;/code&gt;中即可。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>尝试研究自己的flux架构</title>
      <link>http://qihigh.github.io/android/flux_study/</link>
      <pubDate>Mon, 26 Oct 2015 15:32:19 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/flux_study/</guid>
      <description>&lt;p&gt;###事件通知&lt;/p&gt;

&lt;p&gt;flux架构依赖于事件通知框架，这里使用的是EventBus，也可以采用otto。（如果不采用事件通知框架的话，会需要activity实现回调接口，这样的话侵入性较大，单元测试也不好写）&lt;/p&gt;

&lt;p&gt;研究eventBus的使用的时候，因为otto一般都是在onStart和onPause进行事件的注册和取消注册，但是在使用eventBus的时候发现，如果在onStart和onPause的时候进行事件注册，会丢失掉第一个事件，所以还是换成了onCreate和onDestory的时候进行事件的注册和取消注册。&lt;/p&gt;

&lt;p&gt;###store的可靠性&lt;/p&gt;

&lt;p&gt;flux架构依赖于store的数据可靠性，所以需要对有可能造成数据不可靠的情况进行特殊处理。一般的，这种情况容易出现在ListView显示的时候，store里的List集合被频繁更改导致的数据不同步。这里采用loadMore的方式，会触发数据集合的增长变化，来定位引发数据不同步的步骤，这里有两个值得怀疑的步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Api网络密集请求，在回调中频繁更新数据。&lt;/li&gt;
&lt;li&gt;事件通知框架有延迟，导致数据更新了而通知未到达。&lt;/li&gt;
&lt;li&gt;ListView中itemView渲染速度慢导致刷新问题（已验证，在View中添加耗时操作，界面卡顿，但不会出现异常）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过实际尝试，发现循环10次调用之后，步骤1会导致数据不同步，而步骤2没有出现异常。说明事件通知框架在数据密集请求的情况下是可靠地。&lt;/p&gt;

&lt;p&gt;###单元测试尝试&lt;/p&gt;

&lt;p&gt;flux架构一个特点就是方便测试，因为数据是单向的，事件的开始是调用action中的一个方法，最后一步数据的流向是通过EventBus来控制的，所以当做单元测试的时候，并不需要依赖activity，直接调用一个方法，然后注册一个Event监听，就能方便的完成单元测试。&lt;/p&gt;

&lt;p&gt;当然，由于数据有可能是网络请求，单元测试的过程中需要进行等待网络请求完成才能继续向下，这里采用了一个简单的锁机制，阻塞单元测试在网络请求完成之前不退出。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一种锁是AtomBoolean，是最初想到的方案，并且写在setUp和tearDown中，用起来很方便。&lt;/li&gt;
&lt;li&gt;现在采用的是BlockingQueue，这个是现在用的比较多的类，不过这里之所以采用他，是因为他和go语言中的锁机制是相同的，从大体上来看，更容易理解，使用起来比原子操作也简单。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行单元测试有两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接在类的右键中运行单元测试，有特定的UI界面，比较友好，适合单个的单元测试。&lt;/li&gt;
&lt;li&gt;在命令行输入命令 &lt;code&gt;./gradlew connectedCheck&lt;/code&gt; ，适合运行所有单元测试。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>小米状态栏颜色</title>
      <link>http://qihigh.github.io/android/xiaomi_statusbar/</link>
      <pubDate>Mon, 26 Oct 2015 15:30:20 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/xiaomi_statusbar/</guid>
      <description>&lt;p&gt;小米的系统，最上方的状态栏是没有任何背景颜色的，当切换主题的时候就会遇到问题。当系统是白色的时候，如果切换到一个白色背景的主题，会导致上边状态栏的内容是分辨不出来的。（魅族的状态栏也没有颜色，但是他会根据当前背景，自动更新颜色，所以没有这个问题）&lt;/p&gt;

&lt;p&gt;这里通过反射的方式寻得了仅针对小米系统的一个解决方案:&lt;/p&gt;

&lt;pre&gt;
/**
 * 判断是否是小米，如果是的话，通过反射的方式，修改状态栏模式。
 * @param window
 */
public static void statusBar(Window window) {
    Boolean blackbg = Res.getBoolean(R.bool.isPop);
    Class clazz = window.getClass();
    try {
        int tranceFlag = 0;
        int darkModeFlag = 0;
        Class layoutParams = Class.forName(&#34;android.view.MiuiWindowManager$LayoutParams&#34;);

        Field field = layoutParams.getField(&#34;EXTRA_FLAG_STATUS_BAR_TRANSPARENT&#34;);
        tranceFlag = field.getInt(layoutParams);

        field = layoutParams.getField(&#34;EXTRA_FLAG_STATUS_BAR_DARK_MODE&#34;);
        darkModeFlag = field.getInt(layoutParams);

        Method extraFlagField = clazz.getMethod(&#34;setExtraFlags&#34;, int.class, int.class);

        extraFlagField.invoke(window, blackbg ? tranceFlag : darkModeFlag, blackbg ? tranceFlag : darkModeFlag);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>android start</title>
      <link>http://qihigh.github.io/android/start/</link>
      <pubDate>Mon, 26 Oct 2015 15:13:03 +0800</pubDate>
      
      <guid>http://qihigh.github.io/android/start/</guid>
      <description>&lt;p&gt;android相关&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>